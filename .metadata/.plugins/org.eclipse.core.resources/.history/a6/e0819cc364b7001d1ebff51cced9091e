package com.app.auth;

import java.time.LocalDate;
import java.util.Optional;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestBody;

import com.app.dto.StudentDto;
import com.app.pojos.Login;
import com.app.pojos.Student;
import com.app.pojos.UserRoles;
import com.app.repository.LoginRepository;
import com.app.repository.StudentRepository;
import com.app.securityconfig.JwtService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class AuthenticationService {
	private final StudentRepository studentRepository;
	private final LoginRepository loginRepository;
	private final JwtService jwtService;
	private final PasswordEncoder passwordEncoder;
	private final AuthenticationManager authenticationManager;
	
	//String firstName, String lastName, String mobileNo, String emailId, String password,
	//String gender,
	//byte[] profilePhoto, byte[] idProof, LocalDate dob
	
	public AuthenticationResponse register(StudentDto request) {
		System.out.println(request);
		String passwd = passwordEncoder.encode(request.getPassword());
		Student student=new Student(request.getFirstName(),
				request.getLastName(),request.getMobileNo(),request.getEmailId(),
				passwd,request.getGender(),request.getProfilePhoto(),
				request.getIdProof(),request.getDob());
		studentRepository.save(student);
		Login newLogin=new Login(request.getEmailId(),
				passwd,
				UserRoles.STUDENT);
		loginRepository.save(newLogin);
		var jwtToken=jwtService.generateToken(newLogin);
		return AuthenticationResponse.builder()
				.token(jwtToken)
				.build();
	}

	public AuthenticationResponse authenticate(AuthenticationRequest request) {
		authenticationManager.authenticate(
				new UsernamePasswordAuthenticationToken(
						request.getEmailId(),
						request.getPassword()));
		Optional<Login> login =loginRepository.findByEmailId(request.getEmailId())
				.orElseThrow();
		System.out.println(login);
		var jwtToken=jwtService.generateToken(login);
		return AuthenticationResponse.builder()
				.token(jwtToken)
				.build();
	}

}
